// ========== –ö–ï–® –î–õ–Ø –ë–´–°–¢–†–û–ì–û –ü–û–ò–°–ö–ê ==========
let clientDataCache = null;
let lastCachedTime = 0;
const CACHE_TIMEOUT = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

// ========== –ù–ê–°–¢–†–û–ô–ö–ò ==========
const WORD_TEMPLATE1 = "—à–∞–±–ª–æ–Ω_–¥–æ–≥–æ–≤–æ—Ä–∞";
const WORD_TEMPLATE2 = "—à–∞–±–ª–æ–Ω_–¥–æ–ø—Å–æ–≥–ª–∞—à–µ–Ω–∏—è";
const WORD_TEMPLATE3 = "—à–∞–±–ª–æ–Ω_–¥–æ–ø–∫–∞";
const EXCEL_TEMPLATE = "template_zayavlenie";
const OUTPUT_FOLDER = "–¥–æ–∫—É–º–µ–Ω—Ç—ã";
const DB_SHEET_NAME = "–±–∞–∑–∞"; // –õ–∏—Å—Ç —Å –±–∞–∑–æ–π –∫–ª–∏–µ–Ω—Ç–æ–≤
const TEMPLATES_FOLDER = "—à–∞–±–ª–æ–Ω—ã"; // –ò–º—è –ø–∞–ø–∫–∏ —Å —à–∞–±–ª–æ–Ω–∞–º–∏

// –¢–∞—Ä–∏—Ñ—ã –¥–ª—è –∫—É–ª—å—Ç—É—Ä (—Ç–µ–Ω–≥–µ/–≥–∞)
const TARIFFS = {
  "–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å": 7067,
  "–æ–≤–æ—â–∏(–±—é–¥–∂–µ—Ç.–æ—Ä–≥–∞–Ω)": 7067,
  "—Å–∞—Ö.—Å–≤–µ–∫–ª–∞": 7133,
  "–º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–µ —Ç—Ä–∞–≤—ã": 8400,
  "–ø–æ–¥—Å–æ–ª–Ω–µ—á–Ω–∏–∫": 4800,
  "–±–∞—Ö—á–µ–≤—ã–µ": 3933,
  "–∫—É–∫—É—Ä—É–∑–∞ –Ω–∞ –∑–µ—Ä–Ω–æ": 5733,
  "—Å–∞–¥—ã": 7733,
  "—Å–æ—è(–º–∞—Å–ª–µ–Ω–∏—á–Ω—ã–µ)": 5067,
  "—è—Ä–æ–≤—ã–µ –∑–µ—Ä–Ω–æ–≤—ã–µ": 3733,
  "–æ–∑–∏–º–∞—è –ø—à–µ–Ω–∏—Ü–∞": 3133,
  "—Ç–∞–ª-—Ç–µ—Ä–µ–∫": 7733
};

// –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –î–õ–Ø –†–ê–ó–ù–´–• –õ–ò–°–¢–û–í EXCEL
const SHEET_CONFIG = {
  "”©—Ç—ñ–Ω—ñ–º": {
    BASIC_FIELDS: {
      "–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞": "D1",
      "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞": "C12",
      "–ö–∞–Ω–∞–ª": "A16",
      "–ù–∞–ª–∏—á–∏–µ –∑–µ–º–µ–ª—å": "D13",
      "–û—Ä–æ—à–∞–µ–º—ã–µ": "D14"
    },
    COMPOSITE_FIELDS: {
      "–∫—Ö_—Ñ–∏–æ": { cell: "C8", template: "–∫/—Ö {{–ö–•}} {{–§–ò–û —á–∏—Å—Ç—ã–π}}" },
      "full_adress": { cell: "C10", template: "–ê–¥—Ä–µ—Å: {{–°–µ–ª–æ}}, {{–ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å}}" }
    },
    CULTURE_CELLS: {
      "—Å–∞—Ö.—Å–≤–µ–∫–ª–∞": ["D22"],
      "–æ–≤–æ—â–∏(–±—é–¥–∂–µ—Ç.–æ—Ä–≥–∞–Ω)": ["D23"],
      "–º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–µ —Ç—Ä–∞–≤—ã": ["D24"],
      "–ø–æ–¥—Å–æ–ª–Ω–µ—á–Ω–∏–∫": ["D25"],
      "–±–∞—Ö—á–µ–≤—ã–µ": ["D26"],
      "–∫—É–∫—É—Ä—É–∑–∞ –Ω–∞ –∑–µ—Ä–Ω–æ": ["D27"],
      "—Å–∞–¥—ã": ["D28"],
      "–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å": ["D29"],
      "—Å–æ—è(–º–∞—Å–ª–µ–Ω–∏—á–Ω—ã–µ)": ["D30"],
      "—è—Ä–æ–≤—ã–µ –∑–µ—Ä–Ω–æ–≤—ã–µ": ["D31"],
      "–æ–∑–∏–º–∞—è –ø—à–µ–Ω–∏—Ü–∞": ["D32"],
      "—Ç–∞–ª-—Ç–µ—Ä–µ–∫": ["D33"]
    }
  },
  "–∂–æ—Å–ø–∞—Ä": {
    SIMPLE_FIELDS: {
      "–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞": "B40"
    },
    COMPOSITE_FIELDS: {
      "–∫—Ö_—Ñ–∏–æ": { cell: "D40", template: "–∫/—Ö {{–ö–•}} {{–§–ò–û —á–∏—Å—Ç—ã–π}}" }
    }
  }
};

// –ü–æ–ª—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ integer
const INTEGER_FIELDS = {
  "–ù–æ–º–µ—Ä": "–Ω–æ–º–µ—Ä",
  "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞": "—Ç–µ–ª–µ—Ñ–æ–Ω",
  "–ò–ò–ù/–ë–ò–ù": "–∏–∏–Ω_–±–∏–Ω",
  "–û–±—ä–µ–º": "–æ–±—ä–µ–º"
};

function onOpen() {
  const ui = SpreadsheetApp.getUi();
  ui.createMenu('üìã –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤')
    .addItem('–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å—å —Ä–µ–µ—Å—Ç—Ä', 'generateDocuments')
    .addItem('–ù–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –ò–ò–ù', 'showForm')
    .addItem('–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞', 'showCreateForm')
    .addItem('–û–±–Ω–æ–≤–∏—Ç—å –∫–µ—à –±–∞–∑—ã', 'resetCache')
    .addToUi();
}

// ========== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========
function generateDocuments() {
  createBackup();
  
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getActiveSheet();
  const dataRange = sheet.getDataRange();
  const data = dataRange.getValues();
  const headers = data[0];
  
  const colIndex = {};
  headers.forEach((header, index) => {
    colIndex[header] = index;
  });
  
  const requiredColumns = ['–ù–æ–º–µ—Ä', '–§–ò–û —á–∏—Å—Ç—ã–π', '–ö–•', '–î–æ–∫—É–º–µ–Ω—Ç—ã_—Å–æ–∑–¥–∞–Ω—ã', '–î–∞—Ç–∞ –¥–æ–≥–æ–≤–æ—Ä–∞'];
  requiredColumns.forEach(col => {
    if (!(col in colIndex)) {
      sheet.getRange(1, sheet.getLastColumn() + 1).setValue(col);
      colIndex[col] = sheet.getLastColumn() - 1;
    }
  });

  const parentFolder = DriveApp.getFileById(ss.getId()).getParents().next();
  const outputFolder = getOrCreateFolder(parentFolder, OUTPUT_FOLDER);
  
  const wordTemplate1 = getTemplateFile(parentFolder, WORD_TEMPLATE1);
  const wordTemplate2 = getTemplateFile(parentFolder, WORD_TEMPLATE2);
  const wordTemplate3 = getTemplateFile(parentFolder, WORD_TEMPLATE3);
  const excelTemplate = getTemplateFile(parentFolder, EXCEL_TEMPLATE);
  
  for (let i = 1; i < data.length && i < 1000; i++) {
    const row = data[i];
    
    if (!row[colIndex['–ù–æ–º–µ—Ä']] || !row[colIndex['–§–ò–û —á–∏—Å—Ç—ã–π']]) continue;
    if (row[colIndex['–î–æ–∫—É–º–µ–Ω—Ç—ã_—Å–æ–∑–¥–∞–Ω—ã']]) continue;
    
    const clientFolderName = cleanFilename(`${row[colIndex['–ù–æ–º–µ—Ä']]}_${row[colIndex['–§–ò–û —á–∏—Å—Ç—ã–π']]}_${row[colIndex['–ö–•']]}`);
    const clientFolder = getOrCreateFolder(outputFolder, clientFolderName);
    
    const context = createContext(row, colIndex);
    context['–¥–∞—Ç–∞_–¥–æ–≥–æ–≤–æ—Ä–∞'] = formatDate(row[colIndex['–î–∞—Ç–∞ –¥–æ–≥–æ–≤–æ—Ä–∞']]);
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞
    const docName1 = `${cleanFilename(row[colIndex['–ù–æ–º–µ—Ä']])}_–¥–æ–≥–æ–≤–æ—Ä`;
    const newFile1 = wordTemplate1.makeCopy(docName1, clientFolder);
    const doc1 = DocumentApp.openById(newFile1.getId());
    replaceInDoc(doc1, context);
    doc1.saveAndClose();
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–ø—Å–æ–≥–ª–∞—à–µ–Ω–∏—è
    const docName2 = `${cleanFilename(row[colIndex['–ù–æ–º–µ—Ä']])}_–¥–æ–ø—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ`;
    const newFile2 = wordTemplate2.makeCopy(docName2, clientFolder);
    const doc2 = DocumentApp.openById(newFile2.getId());
    replaceInDoc(doc2, context);
    doc2.saveAndClose();
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–ø–∫–∏
    const docName3 = `${cleanFilename(row[colIndex['–ù–æ–º–µ—Ä']])}_–¥–æ–ø–∫–∞`;
    const newFile3 = wordTemplate3.makeCopy(docName3, clientFolder);
    const doc3 = DocumentApp.openById(newFile3.getId());
    replaceInDoc(doc3, context);
    doc3.saveAndClose();
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞—è–≤–ª–µ–Ω–∏—è
    const appName = `${cleanFilename(row[colIndex['–ù–æ–º–µ—Ä']])}_–∑–∞—è–≤–ª–µ–Ω–∏–µ`;
    const newFile4 = excelTemplate.makeCopy(appName, clientFolder);
    const ssApp = SpreadsheetApp.openById(newFile4.getId());
    
    const sheets = ssApp.getSheets();
    sheets.forEach(sheetApp => {
      const sheetName = sheetApp.getName();
      const skipSheets = ["–¥–æ–≥–æ–≤–æ—Ä-1,3,5", "–¥–æ–≥–æ–≤–æ—Ä-2,4,6"];
      if (skipSheets.includes(sheetName)) return;
      
      const config = SHEET_CONFIG[sheetName];
      if (config) fillApplication(sheetApp, row, colIndex, config);
    });
    
    sheet.getRange(i + 1, colIndex['–î–æ–∫—É–º–µ–Ω—Ç—ã_—Å–æ–∑–¥–∞–Ω—ã'] + 1).setValue(new Date());
    SpreadsheetApp.flush();
  }
}

// ========== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –§–û–†–ú–û–ô –ü–û–ò–°–ö–ê ==========
function showForm() {
  resetCache();
  
  const html = HtmlService.createHtmlOutputFromFile('Form')
    .setWidth(1000)
    .setHeight(800);
  SpreadsheetApp.getUi().showModalDialog(html, '–ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –ò–ò–ù');
}

function getClientDatabase() {
  const now = new Date().getTime();
  
  if (clientDataCache && (now - lastCachedTime) < CACHE_TIMEOUT) {
    return clientDataCache;
  }
  
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const dbSheet = ss.getSheetByName(DB_SHEET_NAME);
  
  if (!dbSheet) {
    console.error(`‚ùå –õ–∏—Å—Ç '${DB_SHEET_NAME}' –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
    return {};
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const headers = dbSheet.getRange(1, 1, 1, dbSheet.getLastColumn()).getValues()[0];
  const dbColIndex = {};
  
  // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  headers.forEach((header, index) => {
    dbColIndex[header] = index;
  });
  
  const lastRow = dbSheet.getLastRow();
  const data = dbSheet.getRange(2, 1, lastRow - 1, headers.length).getValues();
  
  clientDataCache = {};
  
  data.forEach(row => {
    const iin = row[dbColIndex["–ò–ò–ù/–ë–ò–ù"]]?.toString().trim() || '';
    if (iin && iin.length >= 5) {
      const client = {
        iin: iin,
        fullName: row[dbColIndex["–§–ò–û —á–∏—Å—Ç—ã–π"]] || '',
        kx: row[dbColIndex["–ö–•"]] || '',
        village: row[dbColIndex["–°–µ–ª–æ"]] || '',
        address: row[dbColIndex["–ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å"]] || '',
        phone: row[dbColIndex["–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"]] || '',
        l_availability: parseFloat(row[dbColIndex["–ù–∞–ª–∏—á–∏–µ –∑–µ–º–µ–ª—å"]]) || 0,
        l_irrigated: parseFloat(row[dbColIndex["–û—Ä–æ—à–∞–µ–º—ã–µ"]]) || 0,
        volume_water: parseFloat(row[dbColIndex["–û–±—ä–µ–º"]]) || 0,
        tarrif: parseFloat(row[dbColIndex["–¢–∞—Ä–∏—Ñ"]]) || 0,
        channel: row[dbColIndex["–ö–∞–Ω–∞–ª"]] || '',
        channel_allocation: row[dbColIndex["–í—ã–¥–µ–ª"]] || '',
        cadastral: row[dbColIndex["–ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä"]] || '',
        sum_snds: parseFloat(row[dbColIndex["–°—É–º–º–∞–Ω–¥—Å"]]) || 0
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫—É–ª—å—Ç—É—Ä–∞–º
      Object.keys(TARIFFS).forEach(culture => {
        client[culture] = parseFloat(row[dbColIndex[culture]]) || 0;
      });
      
      clientDataCache[iin] = client;
    }
  });
  
  lastCachedTime = now;
  console.log(`üîÑ –ö–µ—à –±–∞–∑—ã –æ–±–Ω–æ–≤–ª–µ–Ω. –ó–∞–ø–∏—Å–µ–π: ${Object.keys(clientDataCache).length}`);
  return clientDataCache;
}

function findClientByIIN(iin) {
  const cleanIIN = iin.toString().trim();
  
  if (!/^\d{12}$/.test(cleanIIN)) {
    throw new Error("–ò–ò–ù –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 12 —Ü–∏—Ñ—Ä");
  }
  
  const database = getClientDatabase();
  const client = database[cleanIIN];
  
  if (!client) {
    throw new Error("–ö–ª–∏–µ–Ω—Ç —Å –ò–ò–ù " + cleanIIN + " –Ω–µ –Ω–∞–π–¥–µ–Ω");
  }
  
  return client;
}

// ========== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –ù–û–í–´–• –ö–õ–ò–ï–ù–¢–û–í ==========
function showCreateForm() {
  const html = HtmlService.createHtmlOutputFromFile('CreateForm')
    .setWidth(1000)
    .setHeight(800);
  SpreadsheetApp.getUi().showModalDialog(html, '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞');
}

function generateDocumentsForClient(clientData) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getActiveSheet();
  const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
  if (!clientData.fullName || !clientData.kx) {
    throw new Error("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –§–ò–û —á–∏—Å—Ç—ã–π –∏ –ö–•");
  }
  
  const newRow = sheet.getLastRow() + 1;
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞
  const contractNumber = clientData.contractNumber || generateContractNumber(newRow);
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ "–§–ò–û"
  const fullNameWithKX = `${clientData.fullName || ''} –∫/—Ö ${clientData.kx || ''}`;
  
  const mapping = {
    "–ù–æ–º–µ—Ä": newRow,  // –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –≤ —Ä–µ–µ—Å—Ç—Ä–µ
    "–§–ò–û": fullNameWithKX,
    "–ò–ò–ù/–ë–ò–ù": clientData.iin,
    "–§–ò–û —á–∏—Å—Ç—ã–π": clientData.fullName,
    "–ö–•": clientData.kx,
    "–°–µ–ª–æ": clientData.village,
    "–ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å": clientData.address,
    "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞": clientData.phone,
    "–ù–∞–ª–∏—á–∏–µ –∑–µ–º–µ–ª—å": clientData.l_availability || 0,
    "–û—Ä–æ—à–∞–µ–º—ã–µ": clientData.l_irrigated || 0,
    "–û–±—ä–µ–º": clientData.volume_water || 0,
    "–¢–∞—Ä–∏—Ñ": clientData.tarrif || 0,
    "–ö–∞–Ω–∞–ª": clientData.channel,
    "–í—ã–¥–µ–ª": clientData.channel_allocation,
    "–ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä": clientData.cadastral,
    "–°—É–º–º–∞–Ω–¥—Å": clientData.sum_snds || 0,
    "–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞": contractNumber,
    // –ö—É–ª—å—Ç—É—Ä—ã
    "–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å": clientData["–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å"] || 0,
    "–æ–≤–æ—â–∏(–±—é–¥–∂–µ—Ç.–æ—Ä–≥–∞–Ω)": clientData["–æ–≤–æ—â–∏(–±—é–¥–∂–µ—Ç.–æ—Ä–≥–∞–Ω)"] || 0,
    "—Å–∞—Ö.—Å–≤–µ–∫–ª–∞": clientData["—Å–∞—Ö.—Å–≤–µ–∫–ª–∞"] || 0,
    "–º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–µ —Ç—Ä–∞–≤—ã": clientData["–º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–µ —Ç—Ä–∞–≤—ã"] || 0,
    "–ø–æ–¥—Å–æ–ª–Ω–µ—á–Ω–∏–∫": clientData["–ø–æ–¥—Å–æ–ª–Ω–µ—á–Ω–∏–∫"] || 0,
    "–±–∞—Ö—á–µ–≤—ã–µ": clientData["–±–∞—Ö—á–µ–≤—ã–µ"] || 0,
    "–∫—É–∫—É—Ä—É–∑–∞ –Ω–∞ –∑–µ—Ä–Ω–æ": clientData["–∫—É–∫—É—Ä—É–∑–∞ –Ω–∞ –∑–µ—Ä–Ω–æ"] || 0,
    "—Å–∞–¥—ã": clientData["—Å–∞–¥—ã"] || 0,
    "—Å–æ—è(–º–∞—Å–ª–µ–Ω–∏—á–Ω—ã–µ)": clientData["—Å–æ—è(–º–∞—Å–ª–µ–Ω–∏—á–Ω—ã–µ)"] || 0,
    "—è—Ä–æ–≤—ã–µ –∑–µ—Ä–Ω–æ–≤—ã–µ": clientData["—è—Ä–æ–≤—ã–µ –∑–µ—Ä–Ω–æ–≤—ã–µ"] || 0,
    "–æ–∑–∏–º–∞—è –ø—à–µ–Ω–∏—Ü–∞": clientData["–æ–∑–∏–º–∞—è –ø—à–µ–Ω–∏—Ü–∞"] || 0,
    "—Ç–∞–ª-—Ç–µ—Ä–µ–∫": clientData["—Ç–∞–ª-—Ç–µ—Ä–µ–∫"] || 0
  };
  
  // –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
  for (const header in mapping) {
    if (!headers.includes(header)) {
      sheet.getRange(1, sheet.getLastColumn() + 1).setValue(header);
      headers.push(header);
    }
  }
  
  // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
  for (const [header, value] of Object.entries(mapping)) {
    const colIndex = headers.indexOf(header) + 1;
    if (colIndex > 0) {
      sheet.getRange(newRow, colIndex).setValue(value);
    }
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫
  const colIndex = {};
  headers.forEach((header, index) => {
    colIndex[header] = index;
  });
  
  // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
  if (!colIndex['–î–æ–∫—É–º–µ–Ω—Ç—ã_—Å–æ–∑–¥–∞–Ω—ã']) {
    sheet.getRange(1, sheet.getLastColumn() + 1).setValue('–î–æ–∫—É–º–µ–Ω—Ç—ã_—Å–æ–∑–¥–∞–Ω—ã');
    colIndex['–î–æ–∫—É–º–µ–Ω—Ç—ã_—Å–æ–∑–¥–∞–Ω—ã'] = sheet.getLastColumn() - 1;
  }
  
  const parentFolder = DriveApp.getFileById(ss.getId()).getParents().next();
  const outputFolder = getOrCreateFolder(parentFolder, OUTPUT_FOLDER);
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–∞–ø–∫–∏ –∏ —Ñ–∞–π–ª–æ–≤
  const folderName = cleanFilename(`${newRow}_${clientData.fullName}_${clientData.kx}`);
  const clientFolder = getOrCreateFolder(outputFolder, folderName);
  
  const row = sheet.getRange(newRow, 1, 1, sheet.getLastColumn()).getValues()[0];
  
  const context = createContext(row, colIndex);
  context['–¥–∞—Ç–∞_–¥–æ–≥–æ–≤–æ—Ä–∞'] = formatDate(new Date());
  context['–Ω–æ–º–µ—Ä_–¥–æ–≥–æ–≤–æ—Ä–∞'] = contractNumber;
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  const filePrefix = cleanFilename(`${newRow}_${clientData.fullName}`);
  
  // –î–æ–≥–æ–≤–æ—Ä
  const docName1 = `${filePrefix}_–¥–æ–≥–æ–≤–æ—Ä`;
  const wordTemplate1 = getTemplateFile(parentFolder, WORD_TEMPLATE1);
  const newFile1 = wordTemplate1.makeCopy(docName1, clientFolder);
  const doc1 = DocumentApp.openById(newFile1.getId());
  replaceInDoc(doc1, context);
  doc1.saveAndClose();
  
  // –î–æ–ø—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ
  const docName2 = `${filePrefix}_–¥–æ–ø—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ`;
  const wordTemplate2 = getTemplateFile(parentFolder, WORD_TEMPLATE2);
  const newFile2 = wordTemplate2.makeCopy(docName2, clientFolder);
  const doc2 = DocumentApp.openById(newFile2.getId());
  replaceInDoc(doc2, context);
  doc2.saveAndClose();
  
  // –î–æ–ø–∫–∞
  const docName3 = `${filePrefix}_–¥–æ–ø–∫–∞`;
  const wordTemplate3 = getTemplateFile(parentFolder, WORD_TEMPLATE3);
  const newFile3 = wordTemplate3.makeCopy(docName3, clientFolder);
  const doc3 = DocumentApp.openById(newFile3.getId());
  replaceInDoc(doc3, context);
  doc3.saveAndClose();
  
  // –ó–∞—è–≤–ª–µ–Ω–∏–µ
  const appName = `${filePrefix}_–∑–∞—è–≤–ª–µ–Ω–∏–µ`;
  const excelTemplate = getTemplateFile(parentFolder, EXCEL_TEMPLATE);
  const newFile4 = excelTemplate.makeCopy(appName, clientFolder);
  const ssApp = SpreadsheetApp.openById(newFile4.getId());
  
  const sheets = ssApp.getSheets();
  sheets.forEach(sheetApp => {
    const sheetName = sheetApp.getName();
    const skipSheets = ["–¥–æ–≥–æ–≤–æ—Ä-1,3,5", "–¥–æ–≥–æ–≤–æ—Ä-2,4,6"];
    if (skipSheets.includes(sheetName)) return;
    
    const config = SHEET_CONFIG[sheetName];
    if (config) fillApplication(sheetApp, row, colIndex, config);
  });
  
  sheet.getRange(newRow, colIndex['–î–æ–∫—É–º–µ–Ω—Ç—ã_—Å–æ–∑–¥–∞–Ω—ã'] + 1).setValue(new Date());
  SpreadsheetApp.flush();
  
  return "‚úÖ 4 –¥–æ–∫—É–º–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!";
}

function generateContractNumber(rowIndex) {
  const currentYear = new Date().getFullYear();
  const lastDigit = currentYear.toString().slice(-1);
  return `‚Ññ ${lastDigit}-${rowIndex} –§/–ü`;
}

// ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========
function resetCache() {
  clientDataCache = null;
  console.log("‚ôªÔ∏è –ö–µ—à –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–±—Ä–æ—à–µ–Ω");
  return "–ö–µ—à –æ–±–Ω–æ–≤–ª–µ–Ω!";
}

function createBackup() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getActiveSheet();
  const backupPrefix = sheet.getName() + "_backup_";
  
  deleteOldBackups(ss, backupPrefix);
  
  const timestamp = Utilities.formatDate(new Date(), "GMT+6", "yyyyMMdd_HHmmss");
  const backupName = backupPrefix + timestamp;
  sheet.copyTo(ss).setName(backupName);
}

function deleteOldBackups(ss, prefix) {
  const sheets = ss.getSheets();
  const backups = [];
  
  sheets.forEach(sheet => {
    const name = sheet.getName();
    if (name.startsWith(prefix)) {
      backups.push({
        name: name,
        date: name.replace(prefix, ""),
        sheet: sheet
      });
    }
  });
  
  backups.sort((a, b) => a.date.localeCompare(b.date));
  
  if (backups.length > 3) {
    const toDelete = backups.length - 3;
    for (let i = 0; i < toDelete; i++) {
      ss.deleteSheet(backups[i].sheet);
    }
  }
}

function getOrCreateFolder(parentFolder, folderName) {
  const folders = parentFolder.getFoldersByName(folderName);
  return folders.hasNext() ? folders.next() : parentFolder.createFolder(folderName);
}

function getTemplateFile(parentFolder, fileName) {
  const templatesFolder = getOrCreateFolder(parentFolder, TEMPLATES_FOLDER);
  const files = templatesFolder.getFiles();
  
  while (files.hasNext()) {
    const file = files.next();
    if (file.getName().startsWith(fileName)) {
      return file;
    }
  }
  throw new Error(`‚ùå –§–∞–π–ª —à–∞–±–ª–æ–Ω–∞ "${fileName}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ "${TEMPLATES_FOLDER}"`);
}

function cleanFilename(text) {
  return String(text)
    .replace(/[\\\/:*?"<>|]/g, '')
    .replace(/\s+/g, '_')
    .substring(0, 100);
}

function createContext(row, colIndex) {
  const context = {};
  for (const header in colIndex) {
    const key = header
      .replace(/\s+/g, '_')
      .replace(/\//g, '_')
      .replace(/-/g, '_')
      .toLowerCase();
    let value = row[colIndex[header]];
    
    if (INTEGER_FIELDS[header]) {
      value = toInteger(value);
    }
    
    context[key] = value !== null && value !== undefined ? value.toString() : '';
  }
  return context;
}

function toInteger(value) {
  if (typeof value === 'string') {
    const cleaned = value.replace(/[^\d]/g, '');
    return cleaned ? parseInt(cleaned, 10) : 0;
  }
  return value !== null && value !== undefined ? parseInt(value, 10) : 0;
}

function replaceInDoc(doc, context) {
  const body = doc.getBody();
  for (const key in context) {
    body.replaceText(`{{${key}}}`, context[key] || '');
  }
}

function fillApplication(sheet, row, colIndex, config) {
  if (config.SIMPLE_FIELDS) {
    for (const field in config.SIMPLE_FIELDS) {
      const cell = config.SIMPLE_FIELDS[field];
      const value = row[colIndex[field]] || '';
      sheet.getRange(cell).setValue(value);
    }
  }
  
  if (config.COMPOSITE_FIELDS) {
    for (const field in config.COMPOSITE_FIELDS) {
      const { cell, template } = config.COMPOSITE_FIELDS[field];
      let result = template;
      
      const placeholders = template.match(/{{(.*?)}}/g) || [];
      placeholders.forEach(placeholder => {
        const key = placeholder.replace(/[{}]/g, '').trim();
        const value = row[colIndex[key]] || '';
        result = result.replace(placeholder, value);
      });
      
      sheet.getRange(cell).setValue(result);
    }
  }
  
  if (config.BASIC_FIELDS) {
    for (const field in config.BASIC_FIELDS) {
      const cell = config.BASIC_FIELDS[field];
      const value = row[colIndex[field]] || '';
      sheet.getRange(cell).setValue(value);
    }
  }
  
  if (config.CULTURE_CELLS) {
    for (const culture in config.CULTURE_CELLS) {
      const cells = config.CULTURE_CELLS[culture];
      const value = parseFloat(row[colIndex[culture]]) || 0;
      cells.forEach(cell => {
        sheet.getRange(cell).setValue(value);
      });
    }
  }
}

function formatDate(dateValue) {
  if (!dateValue) return "";
  try {
    const date = new Date(dateValue);
    return Utilities.formatDate(date, "GMT+6", "dd.MM.yyyy");
  } catch (e) {
    return dateValue.toString();
  }
}
